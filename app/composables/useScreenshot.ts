import { ref } from 'vue'

// Import dynamique de html2canvas pour √©viter les probl√®mes SSR
let html2canvas: any = null

if (process.client) {
  import('html2canvas').then(module => {
    html2canvas = module.default
  })
}

export const useScreenshot = () => {
  const isCapturing = ref(false)

  const captureElement = async (elementId: string, options?: {
    filename?: string
    quality?: number
    backgroundColor?: string
    scale?: number
  }) => {
    // V√©rifier que nous sommes c√¥t√© client
    if (!process.client) {
      throw new Error('html2canvas ne peut √™tre utilis√© que c√¥t√© client')
    }

    // Attendre que html2canvas soit charg√©
    if (!html2canvas) {
      console.log('‚è≥ Chargement de html2canvas...')
      await new Promise(resolve => {
        const checkHtml2canvas = () => {
          if (html2canvas) {
            resolve(true)
          } else {
            setTimeout(checkHtml2canvas, 100)
          }
        }
        checkHtml2canvas()
      })
    }

    console.log('üîç Recherche de l\'√©l√©ment:', elementId)
    const element = document.getElementById(elementId)
    if (!element) {
      console.error('‚ùå √âl√©ment non trouv√©:', elementId)
      throw new Error(`√âl√©ment avec l'ID "${elementId}" non trouv√©`)
    }

    console.log('‚úÖ √âl√©ment trouv√©:', element)
    isCapturing.value = true

    try {
      console.log('üì∏ D√©but de la capture...')
      
      // Attendre que l'√©l√©ment soit compl√®tement rendu
      await new Promise(resolve => setTimeout(resolve, 100))
      
      const canvas = await html2canvas(element, {
        backgroundColor: options?.backgroundColor || '#ffffff',
        scale: options?.scale || 3, // Qualit√© plus √©lev√©e
        useCORS: true,
        allowTaint: true,
        logging: false,
        width: element.offsetWidth,
        height: element.offsetHeight,
        // Configuration optimis√©e pour la qualit√©
        foreignObjectRendering: false,
        removeContainer: true,
        // Am√©liorer la qualit√© du texte
        letterRendering: true,
        // Ignorer les √©l√©ments probl√©matiques
        ignoreElements: (el: any) => {
          // Ignorer les √©l√©ments avec des styles probl√©matiques
          const style = window.getComputedStyle(el)
          return style.display === 'none' || 
                 style.visibility === 'hidden' ||
                 el.offsetWidth === 0 ||
                 el.offsetHeight === 0
        },
        // Configuration simplifi√©e pour √©viter les erreurs
        // Pas de onclone pour √©viter les probl√®mes avec clonedDoc.head
      })

      console.log('‚úÖ Canvas cr√©√©:', canvas)

      // Convertir en blob
      return new Promise<Blob>((resolve, reject) => {
        canvas.toBlob((blob: Blob | null) => {
          if (blob) {
            console.log('‚úÖ Blob cr√©√©:', blob.size, 'bytes')
            resolve(blob)
          } else {
            console.error('‚ùå Erreur lors de la cr√©ation du blob')
            reject(new Error('Erreur lors de la cr√©ation du blob'))
          }
        }, 'image/png', options?.quality || 1)
      })
    } catch (error) {
      console.error('‚ùå Erreur lors de la capture:', error)
      throw error
    } finally {
      isCapturing.value = false
    }
  }

  const downloadScreenshot = async (elementId: string, options?: {
    filename?: string
    quality?: number
    backgroundColor?: string
    scale?: number
  }) => {
    try {
      console.log('üöÄ D√©but du t√©l√©chargement de l\'√©l√©ment:', elementId)
      const blob = await captureElement(elementId, options)
      
      console.log('üì• Cr√©ation du lien de t√©l√©chargement...')
      // Cr√©er le lien de t√©l√©chargement
      const url = URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = options?.filename || 'invitation.png'
      
      console.log('üíæ T√©l√©chargement du fichier:', link.download)
      // D√©clencher le t√©l√©chargement
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      // Nettoyer l'URL
      URL.revokeObjectURL(url)
      
      console.log('‚úÖ T√©l√©chargement termin√© avec succ√®s')
      return true
    } catch (error) {
      console.error('‚ùå Erreur lors du t√©l√©chargement:', error)
      throw error
    }
  }

  return {
    isCapturing,
    captureElement,
    downloadScreenshot
  }
}
